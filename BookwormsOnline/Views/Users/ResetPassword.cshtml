@{
    ViewData["Title"] = "Change Password";
}

<h1>@ViewData["Title"]</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<form asp-action="ResetPassword" method="post" id="resetPasswordForm">
    <div class="form-group">
        <label for="newPassword">New Password</label>
        <input type="password" id="newPassword" name="NewPassword" class="form-control" required minlength="8" />
        <div id="passwordFeedback" class="text-info"></div>
    </div>

    <div class="form-group">
        <label for="confirmNewPassword">Confirm New Password</label>
        <input type="password" id="confirmNewPassword" name="NewConfirmPassword" class="form-control" required />
        <span id="passwordMatchFeedback" class="text-danger"></span>
    </div>

    <!-- Add this hidden input field for the PasswordResetToken -->
    <input type="hidden" name="token" value="@ViewData["PasswordResetToken"]" />

    <button type="submit" class="btn btn-primary" id="resetButton" disabled>Change Password</button>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmNewPassword');
            const resetButton = document.getElementById('resetButton');
            const passwordFeedback = document.getElementById('passwordFeedback');
            const passwordMatchFeedback = document.getElementById('passwordMatchFeedback');

            const validatePassword = () => {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                // Password validation requirements
                const requirements = [
                    { regex: /.{12,}/, message: "At least 12 characters long." },
                    { regex: /[a-z]/, message: "Contains a lowercase letter." },
                    { regex: /[A-Z]/, message: "Contains an uppercase letter." },
                    { regex: /[0-9]/, message: "Contains a number." },
                    { regex: /[\W_]/, message: "Contains a special character." }
                ];

                const unmet = requirements.filter(r => !r.regex.test(password));

                // Display feedback for unmet requirements
                if (unmet.length === 0) {
                    passwordFeedback.textContent = "Strong password!";
                    passwordFeedback.style.color = "green";
                } else {
                    passwordFeedback.innerHTML = "Password must meet the following requirements:<ul>" +
                        unmet.map(r => `<li>${r.message}</li>`).join("") +
                        "</ul>";
                    passwordFeedback.style.color = "red";
                }

                // Check if the password and confirm password match
                if (password === confirmPassword && confirmPassword.length > 0 && unmet.length === 0) {
                    passwordMatchFeedback.textContent = "";
                    resetButton.disabled = false;
                } else {
                    passwordMatchFeedback.textContent = "Passwords do not match!";
                    resetButton.disabled = true;
                }
            };

            passwordInput.addEventListener('input', validatePassword);
            confirmPasswordInput.addEventListener('input', validatePassword);
        });
    </script>
}
